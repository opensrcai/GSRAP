cmake_minimum_required(VERSION 3.20)
project(gsrap LANGUAGES CXX C)
set(PROJECT_PREFIX GSRAP)

option(${PROJECT_PREFIX}_USE_SUBMODULE_EIGEN "use submodule eigen" OFF)
option(${PROJECT_PREFIX}_FIND_EIGEN "find eigen" OFF)
option(${PROJECT_PREFIX}_USE_SUBMODULE_SPDLOG "use submodule spdlog" OFF)
option(${PROJECT_PREFIX}_FIND_SPDLOG "find spdlog" OFF)
option(${PROJECT_PREFIX}_FIND_THREADS "find threads" OFF)
option(${PROJECT_PREFIX}_BUILD_SHARE "build GSRAP as a shared library" OFF)
option(${PROJECT_PREFIX}_BUILD_TESTS "build tests" OFF)
option(${PROJECT_PREFIX}_BUILD_EXAMPLES "build examples" OFF)
option(${PROJECT_PREFIX}_BUILD_BENCHMARKS "build benchmarks" OFF)
option(${PROJECT_PREFIX}_ENABLE_NANOBIND "enable nanobind" OFF)
option(${PROJECT_PREFIX}_OPT_FOR_CPU "optimize for the CPU" OFF)
option(${PROJECT_PREFIX}_SHOW_OPT_RESULT "show optimization result" OFF)
option(${PROJECT_PREFIX}_WARNINGS_AS_ERRORS "warnings as errors" OFF)
option(${PROJECT_PREFIX}_USE_SANITIZER "Use ASAN address sanitizer" OFF)

# Sanitizer
if (NOT MSVC AND ${PROJECT_PREFIX}_USE_SANITIZER)
    message("Enable: sanitizer")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-omit-frame-pointer -fsanitize=address")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer -fsanitize=address")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fno-omit-frame-pointer -fsanitize=address")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fno-omit-frame-pointer -fsanitize=address")
else (NOT MSVC AND ${PROJECT_PREFIX}_USE_SANITIZER)
    message("Disable: sanitizer")
endif (NOT MSVC AND ${PROJECT_PREFIX}_USE_SANITIZER)
unset(${PROJECT_PREFIX}_USE_SANITIZER)

if (${${PROJECT_PREFIX}_FIND_THREADS})
  find_package(Threads REQUIRED)
endif (${${PROJECT_PREFIX}_FIND_THREADS})

if (${${PROJECT_PREFIX}_USE_SUBMODULE_EIGEN})
  add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/eigen)
else()
  if (${${PROJECT_PREFIX}_FIND_EIGEN})
    find_package(Eigen3 CONFIG REQUIRED)
  endif (${${PROJECT_PREFIX}_FIND_EIGEN})
endif (${${PROJECT_PREFIX}_USE_SUBMODULE_EIGEN})

if (${${PROJECT_PREFIX}_USE_SUBMODULE_SPDLOG})
  # if (NOT MSVC)
  #     set(SPDLOG_BUILD_SHARED ON CACHE BOOL "Build libspdlog shared library")
  # endif (NOT MSVC)
  set(SPDLOG_BUILD_SHARED OFF CACHE BOOL "Build libspdlog shared library")
  add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/spdlog)
else ()
  if (${${PROJECT_PREFIX}_FIND_SPDLOG})
    find_package(spdlog REQUIRED)
  endif (${${PROJECT_PREFIX}_FIND_SPDLOG})
endif (${${PROJECT_PREFIX}_USE_SUBMODULE_SPDLOG})

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/gsrap_internal)

if (${${PROJECT_PREFIX}_BUILD_TESTS})
  enable_testing()
  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/test/)
endif (${${PROJECT_PREFIX}_BUILD_TESTS})

if (${${PROJECT_PREFIX}_BUILD_EXAMPLES})
  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/example/)
endif (${${PROJECT_PREFIX}_BUILD_EXAMPLES})

if (${${PROJECT_PREFIX}_BUILD_BENCHMARKS})

  # -- cxxopts
  set(CXXOPTS_BUILD_EXAMPLES  OFF CACHE BOOL "build cxxopts example")
  set(CXXOPTS_BUILD_TESTS  OFF CACHE BOOL "build cxxopts tests")
  set(CXXOPTS_ENABLE_INSTALL  OFF CACHE BOOL "enable cxxopts install")
  set(CXXOPTS_ENABLE_WARNINGS  OFF CACHE BOOL "enable cxxopts warnings")
  add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/cxxopts)

  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/benchmark/)
endif (${${PROJECT_PREFIX}_BUILD_BENCHMARKS})

if (${${PROJECT_PREFIX}_ENABLE_NANOBIND})
  add_subdirectory(${PROJECT_SOURCE_DIR}/python_wrap/)
endif (${${PROJECT_PREFIX}_ENABLE_NANOBIND})
